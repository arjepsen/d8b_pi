Essentially the mixer console contains two boards, that has a dsp chip on it:
The Brain board, and the DSP board.

The boards sends messages to the CPU about stuff that happens on the console,
and the CPU sends commands to the boards, when something should happen.
The "CPU" is a term for the computer that handles the graphical interface, and communication with the two boards.

So, if we move a fader, a pot or press a button, a message is sent from the Brain board to the CPU.
Then the CPU would send a message to the DSP board about how to handle the audio...


Overall parts of the program:
One part is displaying a graphical interface.
Another part is handling messages to and from the console.

There is four "banks" in the mixer, so the messages that are sent to and from the mixer, can be dependant on 
the currently selected bank.
So There are several maps of method callbacks set up - one for each bank.
And then a pointer to such a map is used, to handle the current selection.

Then other classes can "subscribe" to an event, by registering a callback with the event bus.

An important challenge here is, that each channelstrip should be configurable, so that any strip in any bank, 
can be configured to handle any specific channel.
A channel can even be configured to more than one strip on the same bank. This creates a bit of trickyness in handling
a channel event, as it needs to update the ui, but also all other associated strips on the current bank.

Things to explain:
What is a "channel"
What is a bank.
The "Association" between the channelstrips and a channel.

So:
When a fader is moved, either in console or UI:
1: The Brain board sends a message on the brain com uart.
2: The BrainComClass' messageReceiver thread reads the message, and write it to the circular buffer singleton.
3: The messageHandler thread in the mixerManager class pops the message off the buffer, and posts an event in the 
    eventBus instance.
4: The "postFaderEvent" method in the eventbus runs. 
   First, it uses the array of pointers to channel objects, to run the "updateChannelVolume" method
   for the channel that is currently associated with this channelstrip.
5: The channel object method sends a DSP command to the DSP board, to update it's level.
   (unless the channel is muted, in which case it only updates it's record of the volume.)
6: Next, the postFaderEvent method in eventbus continues, and constructs two bitmasks of 
   associated channels, where one is "reduced", meaning it leaves out the "calling" strip.
   These two bitmasks are then used to call methods for both the UI and the console, to update
   it's fader positions. This is how we handle the situation where more than one strip on a given
   bank is controling the same channel.
   Using the bitmasks should potentially be a bit faster than using arrays, and uses less memory.


When a vpot on a channelstrip is moved, it's a bit more tricky, because they can control 
different things.





LEDS:
So, a channel always keeps a bitmap of LED states. This is actually something belonging to the channelStrip, 
But it makes sense that a channel keeps a bitmap corresponding to it's states - 'cause the channelstrip does not
keep track of that.
The channelstrip will keep track of it's currently lit LED's though.
In this way, when there is a change, we can compare these two, to get a bitmap of which led's to change.
This is also to prevent a situation where any change would require the channelstrip to track the changes on all of the four banks.
